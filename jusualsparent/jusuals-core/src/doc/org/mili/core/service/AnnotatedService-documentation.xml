<?xml version='1.0' encoding='utf-8'?>
<documentation name="AnnotatedService" filename-prefix="annotatedservice" creator="mlieshoff"
        creation="12.05.2011 20:11" version="1.0" copyright="org.mili">
    <written-language token="EN"/>
    <author name="Michael Lieshoff" token="ML" email="michaellieshoff@gmx.de"/>
    <part name="Introduction">
        <paragraph name="What is an annotated service?">
            <text ressource="What is an annotated service?_1"><![CDATA[
            An annotated service is created by a class having service annotations. The annotated
            service wraps the class into a more serviceable structure, having start()- and
            stop()-methods.
            ]]></text>
        </paragraph>
        <paragraph name="Future of annotated services">
            <text ressource="Future of annotated services_1"><![CDATA[
            It's planned to have parameters in service methods and define more then one service
            method and service stop method. These method's should be executed by used annotated
            defined order.
            ]]></text>
        </paragraph>
    </part>
    <part name="Usage">
        <paragraph name="Wrap an annotated Class">
            <text ressource="Wrap an annotated Class_1"><![CDATA[
            The wrapped class must have at least a service method, e.g. @ServiceMethod placed on
            a parameterless method. There can be a @ServiceStopMethod, but not must.
            ]]></text>
        </paragraph>
    </part>
    <part name="Examples">
        <paragraph name="Class Foo">
            <text ressource="Class Foo_1"><![CDATA[
            Start writing a class with a simple method. This method will be annotated with the
            @ServiceMethod annotation. Then add a method called at stop, use the
            @ServiceStopMethod annotation.
            ]]></text>
            <pre ressource="Class Foo_2"><![CDATA[
            public class Foo() {
                @ServiceMethod
                public void doFoo() {
                    System.out.println("Hello world!");
                }
                @ServiceStopMethod
                public void doEnd() {
                    System.out.println("Stop.");
                }
            }
            ]]></pre>
            <text ressource="Class Foo_3"><![CDATA[
            Now the class can be wrapped into an annotated service, simple by use the class
            AnnotatedService.
            ]]></text>
            <pre ressource="Class Foo_4"><![CDATA[
            public void somewhere() {
                AnnotatedService service = new AnnotatedService(Foo.class);
                service.start();
                service.stop();
            }
            ]]></pre>
            <text ressource="Class Foo_5"><![CDATA[
            An execution of somewhere()-method will produce following output:
            ]]></text>
            <pre ressource="Class Foo_6"><![CDATA[
                Hello world!
                Stop.
            ]]></pre>
            <text ressource="Class Foo_7"><![CDATA[
            How to handle a service method with passed parameters? It's easy to do. Just pass
            the parameters as map through the service method.
            ]]></text>
            <pre ressource="Class Foo_8"><![CDATA[
                @ServiceMethod
                public void doFoo(Map<String, String> params) {
                    System.out.println("Hello world! " + params.get("foo"));
                }
            ]]></pre>
        </paragraph>
    </part>
    <changelog>
        <change date="12.05.2011 20:11" version="1.0" who="mlieshoff" what="Creation."/>
    </changelog>
</documentation>